#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build Test-Rsync-Proxy

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'false'
  # schedule:
   #  - cron: 0 14 * * 5

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  model: 360T7_108M_2410
  model2: cmcc_rax3000m_2410
  CONFIG_FILE: MakeMenu.K2P.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai
  UPLOAD_ZZNAS: true
  ftp_username: ${{ secrets.FTP_USERNAME }}
  ftp_psw: ${{ secrets.FTP_PSW }}
  ftp_ip: ${{ secrets.FTP_IP }}
  TargetPath: OpenwrtImgs/mt7981/360T7_108M_24.10
  TargetPath2: OpenwrtImgs/mt7981/RAX3000M_NAND
  whkey: ${{ secrets.WEBHOOK }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Check space usage
      if: (!cancelled())
      run: df -hT
        
    - name: Upload firmware to my NAS
      id: zz-nas
      if: env.UPLOAD_ZZNAS == 'true' && !cancelled()
      run: |
        send_dingding="curl -s \"https://oapi.dingtalk.com/robot/send?access_token=${whkey}\" -H 'Content-Type: application/json' -d '{\"msgtype\": \"markdown\",\"markdown\": {\"title\":"
        send_content1="„Äê${model}„Äë[TargetPath, ${TargetPath}][ftp_ip, ${ftp_ip}][ftp_username, ${ftp_username}][ftp_psw, ${ftp_psw}]ÁºñËØëÊàêÂäüÔºÅÊ≠£Âú®‰∏ä‰º†Âõ∫‰ª∂Âà∞NAS..."
        send_content2="„Äê${model}„ÄëÁºñËØëÊàêÂäüÔºÅÂõ∫‰ª∂ÊàêÂäü‰∏ä‰º†Âà∞NAS„ÄÇ"
        markdown_splitline="\n\n---\n\n"
        GITHUB_WORKFLOW_URL=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
        nowtime=`date "+%Y-%m-%d %H:%M:%S"`
        eval "$send_dingding \"${send_content1}\",\"text\":\"${nowtime} $markdown_splitline #### <font color=#6A65FF>${send_content1}</font>\n\n[ÁÇπÊ≠§ÈìæÊé•Êü•Áúã](${GITHUB_WORKFLOW_URL})\"}}'"
        
        cd /tmp
        wget -nc -O test1.file https://github.com/xylz0928/Openwrt-Make/raw/refs/heads/main/test.file
        wget -nc -O test2.file https://github.com/xylz0928/Openwrt-Make/raw/refs/heads/main/test.file
        wget -nc -O test3.file https://github.com/xylz0928/Openwrt-Make/raw/refs/heads/main/test.file
        wget -nc -O test4.file https://github.com/xylz0928/Openwrt-Make/raw/refs/heads/main/test.file
        wget -nc -O test5.file https://github.com/xylz0928/Openwrt-Make/raw/refs/heads/main/test.file
        wget -nc -O test6.file https://github.com/xylz0928/Openwrt-Make/raw/refs/heads/main/test.file
        wget -nc -O test7.file https://github.com/xylz0928/Openwrt-Make/raw/refs/heads/main/test.file
        UPLOAD_FILE_1="test1.file"
        UPLOAD_FILE_2="test2.file"
        UPLOAD_FILE_3="test3.file"
        UPLOAD_FILE_4="test4.file"
        UPLOAD_FILE_5="test5.file"
        UPLOAD_FILE_6="test6.file"
        UPLOAD_FILE_7="test7.file"
        
        echo $ftp_psw > /tmp/rsync.psw && chmod 600 /tmp/rsync.psw

        transfer_with_retry() {
          local file="$1"
          local target="$2"
          local retries=3
          local attempt=1
              
          if [[ -z "$file" ]]; then
            echo "‚ö†Ô∏è  Skipping empty file parameter"
            return 0
          fi
              
          if ! ls $file >/dev/null 2>&1; then
            echo "‚ö†Ô∏è  File(s) matching '$file' not found, skipping"
            return 0
          fi
              
          while true; do
            echo "üöÄ Attempt $attempt: Transferring $file to $target"
            if rsync -avzP --partial "$file" "$target" --password-file=/tmp/rsync.psw; then
              echo "‚úÖ Successfully transferred $file"
              return 0
            fi
                  
            if [[ $attempt -ge $retries ]]; then
              echo "‚ùå Critical failure: $file failed after $retries attempts"
              return 1
            fi
                  
            echo "‚ö†Ô∏è  Failed attempt $attempt for $file. Retrying in 5 seconds..."
            sleep 5
            ((attempt++))
          done
        }
          
        transfer_group() {
          local target="$1"
          shift
          local files=("$@")
          local error_occurred=0
              
          echo "===================== Transferring to $target ====================="
              
          for file in "${files[@]}"; do
            if ! transfer_with_retry "$file" "$target"; then
              error_occurred=1
              echo "‚ùå File $file failed, skipping but continuing with others"
            fi
          done
              
          return $error_occurred
        }
          
        timestamp=$(date +"%Y.%m.%d-%H%M")
        target1="$ftp_username@$ftp_ip::$TargetPath/$timestamp/"
        target2="$ftp_username@$ftp_ip::$TargetPath2/$timestamp/"
          
        group1=("$UPLOAD_FILE_1" "$UPLOAD_FILE_2" "$UPLOAD_FILE_3" "$UPLOAD_FILE_7")
        group2=("$UPLOAD_FILE_4" "$UPLOAD_FILE_5" "$UPLOAD_FILE_6" "$UPLOAD_FILE_7")
          
        transfer_group "$target1" "${group1[@]}" || {
          echo "‚ö†Ô∏è  One or more files in group 1 failed"
        }
          
        transfer_group "$target2" "${group2[@]}" || {
          echo "‚ö†Ô∏è  One or more files in group 2 failed"
        }
          
        rm -f /tmp/rsync.psw
        echo "===================== Transfer Completed ====================="
        
        echo "::warning file=zz-nas.com::All Released Files Uploaded to ZZ-NAS"
        
        nowtime=`date "+%Y-%m-%d %H:%M:%S"`
        eval "$send_dingding \"${send_content2}\",\"text\":\"${nowtime} $markdown_splitline #### <font color=#92D050>${send_content2}</font>\n\n[ÁÇπÊ≠§ÈìæÊé•Êü•Áúã](${GITHUB_WORKFLOW_URL})\"}}'"
